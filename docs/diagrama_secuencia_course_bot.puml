@startuml

' Almacenar Busquedas mediante bot.

actor Bot
boundary CourseController

participant UserValidate
participant UserService
participant UserRepository
participant SearchService
participant SearchRepository
participant CourseService
participant UserSchema
participant SearchSchema
entity UserModel
entity SearchModel
database data

Bot -> CourseController: POST (courses_url, discord_id)
activate CourseController
CourseController -> UserValidate: validate(discord_id)
activate UserValidate
UserValidate -> UserService: get_by_discord_id()
deactivate UserValidate
activate UserService
UserService -> UserRepository: find_by_discord_id()
deactivate UserService
activate UserRepository
UserRepository -> UserModel: discord_id()
deactivate UserRepository
activate UserModel
UserModel -> data: query (SELECT)
UserModel <- data: Register
UserModel -> UserSchema: Objeto user
deactivate UserModel
activate UserSchema
UserSchema -> CourseController: Json user
deactivate UserSchema
CourseController -> SearchSchema: load(data)
activate SearchSchema
SearchSchema -> CourseController: model
deactivate SearchSchema
CourseController -> SearchService: add(model)
activate SearchService
SearchService -> SearchRepository: create(model)
deactivate SearchService
activate SearchRepository
SearchRepository -> SearchModel: commit(model)
deactivate SearchRepository
activate SearchModel
SearchModel -> data: Insert
SearchModel <- data: Object
SearchModel -> SearchSchema: Objeto user
deactivate SearchModel
activate SearchSchema
SearchSchema -> CourseController: Json user
deactivate SearchSchema
deactivate UserSchema
CourseController -> Bot : Json
deactivate CourseController

@enduml